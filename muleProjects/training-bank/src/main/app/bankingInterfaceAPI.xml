<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd" version="EE-3.5.1">
    <apikit:config name="bankingInterfaceAPI-config" raml="bankingInterfaceAPI.raml" consoleEnabled="true" consolePath="console" doc:name="Router"/>
    <apikit:mapping-exception-strategy name="bankingInterfaceAPI-apiKitGlobalExceptionMapping" doc:name="Mapping Exception Strategy">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
    <db:mysql-config name="MySQL_Configuration" host="training.cpk4jjb2mzwd.us-west-2.rds.amazonaws.com" port="3306" user="muletraining" password="muleftw!" database="training" doc:name="MySQL Configuration"/>
    <ws:consumer-config name="Web_Service_Consumer" wsdlLocation="http://banking-transaction.cloudhub.io/soap?wsdl" service="TransferServiceService" port="TransferServicePort" serviceAddress="http://banking-transaction.cloudhub.io/soap" doc:name="Web Service Consumer"/>
    <data-mapper:config name="Xml_getIncomingTransfersResponse__To_JSON" transformationGraphPath="xml_getincomingtransfersresponse__to_json.grf" doc:name="Xml_getIncomingTransfersResponse__To_JSON"/>
    <data-mapper:config name="JSON_To_Xml_createTransfer_" transformationGraphPath="json_to_xml_createtransfer_.grf" doc:name="JSON_To_Xml_createTransfer_"/>
    <flow name="bankingInterfaceAPI-main" doc:name="bankingInterfaceAPI-main">
        <http:inbound-endpoint address="http://localhost:8081/api" doc:name="HTTP"/>
        <apikit:router config-ref="bankingInterfaceAPI-config" doc:name="APIkit Router"/>
        <exception-strategy ref="bankingInterfaceAPI-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="put:/customers/{customer_id}:bankingInterfaceAPI-config" doc:name="put:/customers/{customer_id}:bankingInterfaceAPI-config">
        <set-payload value="{&#xA;  &quot;message&quot; : &quot;Customer Created&quot;&#xA;}" doc:name="Set Payload"/>
    </flow>
    <flow name="delete:/customers/{customer_id}/accounts/{account_id}:bankingInterfaceAPI-config" doc:name="delete:/customers/{customer_id}/accounts/{account_id}:bankingInterfaceAPI-config">
        <set-payload value="{&#xA;  &quot;message&quot; : &quot;Account Deleted&quot;&#xA;}" doc:name="Set Payload"/>
    </flow>
    <flow name="get:/customers:bankingInterfaceAPI-config" doc:name="get:/customers:bankingInterfaceAPI-config">
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[SELECT customer_id, firstName, lastName 
FROM banking_customer]]></db:parameterized-query>
        </db:select>
        <logger level="INFO" doc:name="Logger"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
    </flow>
    <flow name="get:/customers/{customer_id}/accounts:bankingInterfaceAPI-config" doc:name="get:/customers/{customer_id}/accounts:bankingInterfaceAPI-config">
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[SELECT balance, account_id, customer_ref
FROM banking_account
WHERE customer_ref = #[flowVars['customer_id']];]]></db:parameterized-query>
        </db:select>
        <logger level="INFO" doc:name="Logger"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
    </flow>
    <flow name="get:/customers/{customer_id}/accounts/{account_id}:bankingInterfaceAPI-config" doc:name="get:/customers/{customer_id}/accounts/{account_id}:bankingInterfaceAPI-config">
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[SELECT balance, account_id, customer_ref
FROM banking_account
WHERE customer_ref = #[flowVars['customer_id']];]]></db:parameterized-query>
        </db:select>
        <logger level="INFO" doc:name="Logger"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
    </flow>
    <flow name="get:/customers/{customer_id}/accounts/{account_id}/outgoingTransfers:bankingInterfaceAPI-config" doc:name="get:/customers/{customer_id}/accounts/{account_id}/outgoingTransfers:bankingInterfaceAPI-config">
        <ws:consumer config-ref="Web_Service_Consumer" operation="getOutgoingTransfers" doc:name="Web Service Consumer"/>
        <data-mapper:transform config-ref="Xml_getIncomingTransfersResponse__To_JSON" doc:name="Xml&lt;getIncomingTransfersResponse&gt; To JSON"/>
    </flow>
    <flow name="post:/customers:application/json:bankingInterfaceAPI-config" doc:name="post:/customers:application/json:bankingInterfaceAPI-config">
        <json:json-to-object-transformer returnClass="java.util.Map" doc:name="JSON to Object"/>
        <db:insert config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[INSERT INTO `banking_customer` (`firstName`,`lastName`)
VALUES (#[payload.first_name], #[payload.last_name]);]]></db:parameterized-query>
        </db:insert>
    </flow>
    <flow name="post:/customers/{customer_id}/accounts:bankingInterfaceAPI-config" doc:name="post:/customers/{customer_id}/accounts:bankingInterfaceAPI-config">
        <json:json-to-object-transformer returnClass="java.util.Map" doc:name="JSON to Object"/>
        <db:insert config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[INSERT INTO `banking_account` (`balance`,`customer_ref`)
VALUES (#[payload.balance], #[flowVars['customer_id']])]]></db:parameterized-query>
        </db:insert>
    </flow>
    <flow name="post:/customers/{customer_id}/accounts/{account_id}/outgoingTransfers:bankingInterfaceAPI-config" doc:name="post:/customers/{customer_id}/accounts/{account_id}/outgoingTransfers:bankingInterfaceAPI-config">
        <data-mapper:transform config-ref="JSON_To_Xml_createTransfer_" doc:name="JSON To Xml&lt;createTransfer&gt;">
            <data-mapper:input-arguments>
                <data-mapper:input-argument key="accountID">#[flowVars['account_id']]</data-mapper:input-argument>
            </data-mapper:input-arguments>
        </data-mapper:transform>
        <ws:consumer config-ref="Web_Service_Consumer" operation="createTransfer" doc:name="Web Service Consumer"/>
        <set-payload value="{&quot;message&quot;: &quot;Transfer Created&quot;}" doc:name="Set Payload"/>
    </flow>
</mule>
